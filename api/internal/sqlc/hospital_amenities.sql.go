// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: hospital_amenities.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const createHospitalAmenities = `-- name: CreateHospitalAmenities :many
INSERT INTO
    public.hospital_amenities (amenity_id, hospital_id)
SELECT
    unnest($1::INT[]) AS amenity_id,
    unnest($2::INT[]) AS hospital_id
RETURNING
    id, amenity_id, hospital_id
`

type CreateHospitalAmenitiesParams struct {
	AmenityIds  []int32
	HospitalIds []int32
}

func (q *Queries) CreateHospitalAmenities(ctx context.Context, arg CreateHospitalAmenitiesParams) ([]HospitalAmenity, error) {
	rows, err := q.db.QueryContext(ctx, createHospitalAmenities, pq.Array(arg.AmenityIds), pq.Array(arg.HospitalIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HospitalAmenity
	for rows.Next() {
		var i HospitalAmenity
		if err := rows.Scan(&i.ID, &i.AmenityID, &i.HospitalID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
