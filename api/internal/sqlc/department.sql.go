// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: department.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const createDepartment = `-- name: CreateDepartment :many
INSERT INTO
    public.department (name)
SELECT
    unnest($1::VARCHAR(255)[]) AS name
RETURNING
    id, name
`

func (q *Queries) CreateDepartment(ctx context.Context, names []string) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, createDepartment, pq.Array(names))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDepartments = `-- name: GetAllDepartments :many
SELECT
    id, name
FROM
    public.department
`

func (q *Queries) GetAllDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, getAllDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
